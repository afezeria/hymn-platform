package {{package}}

import {{entity_package}}.{{entity_class}}
import {{dao_package}}.{{dao_class}}
import {{dto_package}}.{{dto_class}}
import {{service_package}}.{{service_class}}
import github.afezeria.hymn.common.util.DataNotFoundException
import github.afezeria.hymn.common.util.*
import org.springframework.stereotype.Component

/**
 * @author afezeria
 */
@Component
class {{name}}(
    private val {{dao_name}}: {{dao_class}},
) : {{service_class}} {
    override fun removeById(id: String): Int {
        {{dao_name}}.selectById(id)
            ?: throw DataNotFoundException("{{entity_class}}".msgById(id))
        val i = {{dao_name}}.deleteById(id)
        return i
    }

    override fun update(id: String, dto: {{dto_class}}): Int {
        val e = {{dao_name}}.selectById(id)
            ?: throw DataNotFoundException("{{entity_class}}".msgById(id))
        dto.update(e)
        val i = {{dao_name}}.update(e)
        return i
    }

    override fun create(dto: {{dto_class}}): String {
        val e = dto.toEntity()
        val id = {{dao_name}}.insert(e)
        return id
    }

    override fun findAll(): List<{{entity_class}}> {
        return {{dao_name}}.selectAll()
    }


    override fun findById(id: String): {{entity_class}}? {
        return {{dao_name}}.selectById(id)
    }

{{#table.index_arr}}
    override fun findBy{{fun_name}}(
{{#column_arr}}        {{field_name}}: {{java_type}},
{{/column_arr}}
    ): {{#is_uk}}{{entity_class}}?{{/is_uk}}{{^is_uk}}List<{{entity_class}}>{{/is_uk}} {
        return {{dao_name}}.selectBy{{fun_name}}({{#column_arr}}{{field_name}},{{/column_arr}})
    }

{{/table.index_arr}}

}