package {{package}}

import {{entity_pcakage}}.{{entity_class}}
import {{dao_package}}.{{dao_class}}
import {{service_package}}.{{service_class}}
import org.springframework.stereotype.Component
import java.time.LocalDateTime
import java.util.*

/**
* @author afezeria
*/
@Component
class {{name}}(
private val dbService: DataBaseService,
private val sessionService:SessionService,
) {

    val table = CoreBObjects()

    override fun deleteById(id: String): Int {
        return dbService.db().delete(table) { it.id eq id }
    }

    override fun update(e: CoreBObject): Int {
        requireNotNull(e.id) { "can not update CoreBObject when id is null" }
        val session = sessionService.getSession()
        val accountId = session.accountId
        val accountName = session.accountName
        return dbService.db().update(table) {
            set(it.name, e.name)
            set(it.api, e.api)
            set(it.sourceTable, e.sourceTable)
            set(it.active, e.active)
            set(it.type, e.type)
            set(it.remoteUrl, e.remoteUrl)
            set(it.remoteToken, e.remoteToken)
            set(it.moduleApi, e.moduleApi)
            set(it.remark, e.remark)
            set(it.canInsert, e.canInsert)
            set(it.canUpdate, e.canUpdate)
            set(it.canDelete, e.canDelete)
            set(it.createById, e.createById)
            set(it.createBy, e.createBy)
            set(it.createDate, e.createDate)

            set(it.modifyById, accountId)
            set(it.modifyBy, accountName)
            set(it.modifyDate, LocalDateTime.now())
            where {
                it.id eq e.id
            }
        }
    }

    override fun insert(e: CoreBObject): Int {
        val now = LocalDateTime.now()
        val session = sessionService.getSession()
        val accountId = session.accountId
        val accountName = session.accountName
        e.createDate = now
        e.modifyDate = now
        e.createById = accountId
        e.modifyById = accountId
        e.createBy = accountName
        e.modifyBy = accountName
        return dbService.db().insert(table) {
            set(it.name, e.name)
            set(it.api, e.api)
            set(it.sourceTable, e.sourceTable)
            set(it.active, e.active)
            set(it.type, e.type)
            set(it.remoteUrl, e.remoteUrl)
            set(it.remoteToken, e.remoteToken)
            set(it.moduleApi, e.moduleApi)
            set(it.remark, e.remark)
            set(it.canInsert, e.canInsert)
            set(it.canUpdate, e.canUpdate)
            set(it.canDelete, e.canDelete)
            set(it.createById, e.createById)
            set(it.createBy, e.createBy)
            set(it.modifyById, e.modifyById)
            set(it.modifyBy, e.modifyBy)
            set(it.createDate, e.createDate)
            set(it.modifyDate, e.modifyDate)

        }
    }

    override fun findAll(): List<CoreBObject> {
        return dbService.db().from(table)
            .select(table.columns)
            .map { table.createEntity(it) }
    }

    override fun findById(id: String): CoreBObject? {
        return dbService.db().from(table)
            .select(table.columns)
            .limit(0, 1)
            .map { table.createEntity(it) }
            .firstOrNull()
    }


}