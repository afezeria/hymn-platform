package {{package}}

import {{entity_package}}.{{entity_class}}
import {{dao_package}}.{{dao_class}}
import {{dto_package}}.{{dto_class}}
import {{service_package}}.{{service_class}}
import github.afezeria.hymn.common.platform.DataBaseService
import github.afezeria.hymn.common.exception.DataNotFoundException
import github.afezeria.hymn.common.util.*
import org.ktorm.dsl.*
import org.springframework.stereotype.Service
import org.springframework.beans.factory.annotation.Autowired

/**
* @author afezeria
*/
@Service
class {{name}} : {{service_class}} {

@Autowired
private lateinit var {{dao_name}}: {{dao_class}}

@Autowired
private lateinit var databaseService: DataBaseService


override fun findAll(): MutableList<{{entity_class}}> {
return {{dao_name}}.selectAll()
}

fun pageFind(pageSize: Int, pageNum: Int): MutableList<{{entity_class}}> {
return {{dao_name}}.pageSelect(null, pageSize, pageNum)

}

override fun findById(id: String): {{entity_class}}? {
return {{dao_name}}.selectById(id)
}

override fun findByIds(ids: List
<String>): MutableList<{{entity_class}}> {
  return {{dao_name}}.selectByIds(ids)
  }


  override fun removeById(id: String): Int {
  {{dao_name}}.selectById(id)
  ?: throw DataNotFoundException("{{entity_class}}".msgById(id))
  val i = {{dao_name}}.deleteById(id)
  return i
  }

  override fun removeByIds(ids: List
  <String>): Int {
    return {{dao_name}}.deleteByIds(ids)
    }

    override fun update(id: String, dto: {{dto_class}}): Int {
    val e = {{dao_name}}.selectById(id)
    ?: throw DataNotFoundException("{{entity_class}}".msgById(id))
    dto.update(e)
    val i = {{dao_name}}.update(e)
    return i
    }

    override fun create(dto: {{dto_class}}): String {
        val e = dto.toEntity()
        val id = {{dao_name}}.insert(e)
        return id
    }



{{#table.index_arr}}
  override fun findBy{{fun_name}}(
  {{#column_arr}}        {{field_name}}: {{java_type}},
  {{/column_arr}}
  ): {{#is_uk}}{{entity_class}}?{{/is_uk}}{{^is_uk}}MutableList<{{entity_class}}>{{/is_uk}} {
  return {{dao_name}}.select({{#column_arr}}
  (it.{{field_name}} eq {{field_name}}) and {{/column_arr}} true)
  }

{{/table.index_arr}}

}